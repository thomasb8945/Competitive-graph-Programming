class Solution {
public:
    int findTheCity(int n, vector<vector<int>>& edges, int distanceThreshold) {
        // Step 1: Initialize distance matrix with a large value (infinity)
        vector<vector<int>> dist(n, vector<int>(n, INT_MAX / 2));
        
        // Step 2: Initialize diagonal distances to 0
        for (int i = 0; i < n; ++i) {
            dist[i][i] = 0;
        }
        
        // Step 3: Fill in initial known distances from the edges
        for (auto& edge : edges) {
            int u = edge[0], v = edge[1], w = edge[2];
            dist[u][v] = w;
            dist[v][u] = w;
        }
        
        // Step 4: Apply Floyd-Warshall algorithm to find all-pairs shortest paths
        for (int k = 0; k < n; ++k) {
            for (int i = 0; i < n; ++i) {
                for (int j = 0; j < n; ++j) {
                    if (dist[i][k] < INT_MAX / 2 && dist[k][j] < INT_MAX / 2) {
                        dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]);
                    }
                }
            }
        }
        
        // Step 5: Find the city with the smallest number of neighbors within distanceThreshold
        int minNeighbors = INT_MAX;
        int minCity = -1;
        
        for (int i = 0; i < n; ++i) {
            int neighbors = 0;
            for (int j = 0; j < n; ++j) {
                if (i != j && dist[i][j] <= distanceThreshold) {
                    ++neighbors;
                }
            }
            if (neighbors <= minNeighbors) {
                minNeighbors = neighbors;
                minCity = i;
            }
        }
        
        return minCity;
    }
};
