class Solution {
public:
    int minimumEffortPath(vector<vector<int>>& heights) {
        int m = heights.size(), n = heights[0].size();
        vector<vector<int>> efforts(m, vector<int>(n, INT_MAX));
        priority_queue<pair<int, pair<int, int>>, vector<pair<int, pair<int, int>>>, greater<pair<int, pair<int, int>>>> pq;
        pq.push({0, {0, 0}});
        efforts[0][0] = 0;
        
        int dx[] = {-1, 1, 0, 0}, dy[] = {0, 0, -1, 1};
        
        while (!pq.empty()) {
            auto [eff, pos] = pq.top(); pq.pop();
            int x = pos.first, y = pos.second;
            if (x == m - 1 && y == n - 1) return eff;
            
            for (int i = 0; i < 4; i++) {
                int nx = x + dx[i], ny = y + dy[i];
                if (nx < 0 || nx >= m || ny < 0 || ny >= n) continue;
                int neff = max(eff, abs(heights[nx][ny] - heights[x][y]));
                if (neff < efforts[nx][ny]) {
                    efforts[nx][ny] = neff;
                    pq.push({neff, {nx, ny}});
                }
            }
        }
        
        return -1;
    }
};