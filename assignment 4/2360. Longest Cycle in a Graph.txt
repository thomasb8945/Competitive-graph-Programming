class Solution {
public:
    int longestCycle(vector<int>& edges) {
        int n = edges.size();
        vector<bool> visited(n, false);
        int maxCycle = -1;

        for (int i = 0; i < n; i++) {
            if (!visited[i]) {
                int start = i;
                int cycle = 0;
                int node = i;
                unordered_map<int, int> seen;

                while (true) {
                    if (visited[node]) {
                        break;
                    }

                    visited[node] = true;
                    seen[node] = cycle;

                    int next = edges[node];
                    if (next == -1) {
                        break;
                    }

                    cycle++;
                    node = next;

                    if (seen.count(node)) {
                        maxCycle = max(maxCycle, cycle - seen[node]);
                        break;
                    }
                }
            }
        }

        return maxCycle;
    }
};