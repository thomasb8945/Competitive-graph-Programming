#include <iostream>
#include <vector>

using namespace std;

const int MAX_N = 100005;

vector<int> graph[MAX_N];
int disc[MAX_N];
int low[MAX_N];
bool visited[MAX_N];
bool ap[MAX_N];
int time;

void dfs(int node, int parent) {
    visited[node] = true;
    disc[node] = low[node] = time++;
    int children = 0;

    for (int child : graph[node]) {
        if (!visited[child]) {
            children++;
            dfs(child, node);
            low[node] = min(low[node], low[child]);
            if ((parent != -1 && low[child] >= disc[node]) || (parent == -1 && children > 1)) {
                ap[node] = true;
            }
        } else if (child != parent) {
            low[node] = min(low[node], disc[child]);
        }
    }
}

int main() {
    int n, m;
    cin >> n >> m;

    for (int i = 0; i < m; i++) {
        int u, v;
        cin >> u >> v;
        u--; v--; // adjust for 0-based indexing
        graph[u].push_back(v);
        graph[v].push_back(u);
    }

    time = 0;
    memset(visited, false, sizeof(visited));
    memset(ap, false, sizeof(ap));

    for (int i = 0; i < n; i++) {
        if (!visited[i]) {
            dfs(i, -1);
        }
    }

    int count = 0;
    for (int i = 0; i < n; i++) {
        if (ap[i]) {
            count++;
        }
    }

    cout << count << endl;

    return 0;
}