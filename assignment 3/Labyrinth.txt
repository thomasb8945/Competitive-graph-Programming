#include <iostream>
#include <vector>
#include <queue>
#include <string>

using namespace std;

const int dx[] = {-1, 1, 0, 0};
const int dy[] = {0, 0, -1, 1};
const char dir[] = {'U', 'D', 'L', 'R'};

int main() {
    int n, m;
    cin >> n >> m;
    vector<string> labyrinth(n);
    pair<int, int> start, end;
    for (int i = 0; i < n; i++) {
        cin >> labyrinth[i];
        for (int j = 0; j < m; j++) {
            if (labyrinth[i][j] == 'A') {
                start = {i, j};
            } else if (labyrinth[i][j] == 'B') {
                end = {i, j};
            }
        }
    }

    vector<vector<bool>> visited(n, vector<bool>(m, false));
    queue<pair<pair<int, int>, string>> q;
    q.push({start, ""});
    visited[start.first][start.second] = true;

    while (!q.empty()) {
        pair<pair<int, int>, string> cur = q.front();
        q.pop();
        if (cur.first == end) {
            cout << "YES\n";
            cout << cur.second.size() << "\n";
            cout << cur.second << "\n";
            return 0;
        }
        for (int i = 0; i < 4; i++) {
            int nx = cur.first.first + dx[i];
            int ny = cur.first.second + dy[i];
            if (nx >= 0 && nx < n && ny >= 0 && ny < m && labyrinth[nx][ny] != '#' && !visited[nx][ny]) {
                q.push({{nx, ny}, cur.second + dir[i]});
                visited[nx][ny] = true;
            }
        }
    }

    cout << "NO\n";
    return 0;
}